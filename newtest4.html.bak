it <!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>XYZ Gaming Support Dashboard</title>
<link rel="stylesheet" href="newtest4.css">
</head>
<body>
<audio id="pingSound" src="ping.mp3" preload="auto"></audio>
<div class="header"><h1>🎮 XYZ Gaming Support Dashboard</h1></div>
<div class="nav"><div class="nav-tabs">
<div class="nav-tab active" data-tab="dashboard">Dashboard</div>
<div class="nav-tab" data-tab="promotions">Promotions</div>
<div class="nav-tab" data-tab="livechat">Live Chat</div>
<div class="nav-tab" data-tab="settings">Settings</div>
</div></div>
<div class="main-content">
<div id="dashboard" class="tab-content active">
<div class="grid grid-3">
<div class="stat-card"><div class="stat-number" id="activeUsers">61</div><div class="stat-label">Active Users</div></div>
<div class="stat-card"><div class="stat-number" id="openTickets">0</div><div class="stat-label">Open Tickets</div></div>
<div class="stat-card"><div class="stat-number" id="promotionsCount">3</div><div class="stat-label">Promotions</div></div>
</div>
<div class="grid grid-2">
<div class="card"><div class="card-header">Recent Activity</div>
<div class="card-body">
<div style="color:#64748b;font-size:0.9rem" id="recentActivity">
<div style="margin-bottom:0.5rem">• Loading recent activity...</div>
</div></div></div>
<div class="card"><div class="card-header">Quick Actions</div>
<div class="card-body">
<div style="display:flex;flex-direction:column;gap:1rem">
<button class="btn" onclick="switchTab('promotions')">🎁 Manage Promotions</button>
<button class="btn btn-success" onclick="switchTab('livechat')">💬 View Live Chat</button>
<button class="btn btn-outline" onclick="refreshTickets()">🔄 Refresh Tickets</button>
</div></div></div>
</div></div>
<div id="promotions" class="tab-content">
<div class="grid grid-2">
<div class="card"><div class="card-header">Add New Promotion</div>
<div class="card-body">
<div class="form-group"><label for="promoTitle">Promotion Title</label><input type="text" id="promoTitle" placeholder="Weekend Bonus"></div>
<div class="form-group"><label for="promoDescription">Description</label><textarea id="promoDescription" rows="3" placeholder="Get 25% bonus on all deposits this weekend"></textarea></div>
<div class="form-group"><label for="promoDiscount">Discount (%)</label><input type="number" id="promoDiscount" placeholder="25" min="0" max="100"></div>
<div class="form-group"><label for="promoCode">Promo Code (Optional)</label><input type="text" id="promoCode" placeholder="WEEKEND25"></div>
<button id="addPromoBtn" class="btn btn-primary" onclick="addPromotion()">
    <i class="bi bi-plus-circle me-1"></i> Add Promotion
</button>

<!-- Add Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

<!-- Add some basic styles for notifications -->
<style>
.notification-toast {
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}

.promotion-item {
    transition: all 0.3s ease;
    border: 1px solid #dee2e6;
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    background: #fff;
}

.promotion-item:hover {
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.05);
    transform: translateY(-2px);
}

.promotion-code {
    font-family: monospace;
    background: #f8f9fa;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
}

.btn-copy {
    transition: all 0.2s;
}

.btn-copy:hover {
    transform: scale(1.05);
}

.spinner-border {
    width: 1rem;
    height: 1rem;
    border-width: 0.15em;
}
</style>
</div></div>
<div class="card"><div class="card-header">Bot Response Preview</div>
<div class="card-body"><div class="preview-box" id="botResponse">🎁 Available Promotions:

1. Welcome Bonus
   Get 10% off on your first deposit
   💰 10% off at xyz.com
   🎫 Code: WELCOME10

2. Weekend Special
   25% bonus on weekend deposits
   💰 25% off at xyz.com
   🎫 Code: WEEKEND25

3. VIP Bonus
   Exclusive 50% bonus for VIP members
   💰 50% off at xyz.com
   🎫 Code: VIP50</div></div></div>
</div>
<div class="card"><div class="card-header">Current Promotions</div>
<div class="card-body" style="padding:0"><div id="promotionsList">
<div class="promotion-item"><div class="promotion-info">
<h3>Welcome Bonus</h3><p>Get 10% off on your first deposit</p><p><strong>10% off at xyz.com</strong></p><p>Code: <span class="promotion-code">WELCOME10</span></p>
</div><div><button class="btn btn-danger" onclick="deletePromotion(1)">Delete</button></div></div>
<div class="promotion-item"><div class="promotion-info">
<h3>Weekend Special</h3><p>25% bonus on weekend deposits</p><p><strong>25% off at xyz.com</strong></p><p>Code: <span class="promotion-code">WEEKEND25</span></p>
</div><div><button class="btn btn-danger" onclick="deletePromotion(2)">Delete</button></div></div>
<div class="promotion-item"><div class="promotion-info">
<h3>VIP Bonus</h3><p>Exclusive 50% bonus for VIP members</p><p><strong>50% off at xyz.com</strong></p><p>Code: <span class="promotion-code">VIP50</span></p>
</div><div><button class="btn btn-danger" onclick="deletePromotion(3)">Delete</button></div></div>
</div></div></div></div>
<div id="livechat" class="tab-content">
<div class="grid grid-3">
<!-- Chat List Panel -->
<div class="card" style="grid-column: 1;">
    <div class="card-header">
        <div style="display:flex;justify-content:space-between;align-items:center">
            <span>💬 Active Chats</span>
            <button class="btn btn-outline" style="padding:0.5rem 1rem;font-size:0.9rem" onclick="refreshTickets()">🔄 Refresh</button>
        </div>
    </div>
    <div class="card-body" style="padding:0;max-height:600px;overflow-y:auto">
        <div id="ticketsList">
            <div style="padding:2rem;text-align:center;color:#64748b">
                <div>🔄 Loading chats...</div>
            </div>
        </div>
    </div>
</div>

<!-- Chat Messages Panel -->
<div class="card" style="grid-column: 2 / span 2;">
    <div class="card-header">this
        <div style="display:flex;justify-content:space-between;align-items:center">
            <span>💬 Chat #<span id="currentTicketId">-</span> <span id="chatStatus" style="font-size:0.9rem;color:#64748b"></span></span>
            <div style="display:flex;gap:0.5rem">
                <button class="btn btn-outline" onclick="loadChatHistory()" id="loadHistoryBtn" style="display:none">📜 Load History</button>
                <button class="btn btn-outline" onclick="assignTicket(selectedTicketId)" id="assignBtn" style="display:none">👤 Assign</button>
                <button class="btn btn-success" onclick="resolveTicket(selectedTicketId)" id="resolveBtn" style="display:none">✅ Resolve</button>
                <button class="btn btn-outline" onclick="debugChat()" style="font-size:0.8rem">🐛 Debug</button>
            </div>
        </div>
    </div>
    <div class="card-body" style="padding:0">
        <div class="chat-container" style="height:500px">
            <div class="chat-messages" id="chatMessages">
                <div style="text-align:center;color:#64748b;padding:2rem">
                    <div style="font-size:1.2rem;margin-bottom:1rem">👋 Welcome to Live Chat</div>
                    <div>Select a chat from the left panel to start messaging</div>
                </div>
            </div>
            <div class="chat-input-container" id="chatInputContainer" style="display:none">
                <div class="chat-input">
                    <input type="text" id="replyMessage" placeholder="Type your reply..." onkeypress="handleKeyPress(event)">
                    <button class="btn" onclick="sendReply()">Send</button>
                </div>
                <div style="margin-top:1rem;padding-top:1rem;border-top:1px solid #e2e8f0">
                    <div style="display:flex;gap:0.5rem;flex-wrap:wrap">
                        <button class="btn btn-outline" onclick="useTemplate('deposit')">💰 Deposit Help</button>
                        <button class="btn btn-outline" onclick="useTemplate('password')">🔑 Password Reset</button>
                        <button class="btn btn-outline" onclick="useTemplate('promo')">🎁 Promo Code Help</button>
                        <button class="btn btn-outline" onclick="useTemplate('withdraw')">💸 Withdrawal Help</button>
                        <button class="btn btn-outline" onclick="useTemplate('welcome')">👋 Welcome</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>
<div id="settings" class="tab-content">
  <div class="card" style="max-width:600px;margin:2rem auto;">
    <div class="card-header">Edit Site Settings</div>
    <div class="card-body">
      <form id="settingsForm" onsubmit="saveSettings(event)">
        <div class="form-group">
          <label for="brandName">Brand/Site Name</label>
          <input type="text" id="brandName" name="brandName" required>
        </div>
        <div class="form-group">
          <label for="welcomeMessage">Welcome Message</label>
          <textarea id="welcomeMessage" name="welcomeMessage" rows="2" required></textarea>
        </div>
        <div class="form-group">
          <label for="waitMessage">Wait Message</label>
          <textarea id="waitMessage" name="waitMessage" rows="2" required></textarea>
        </div>
        <div class="form-group">
          <label for="endMessage">Ending Message</label>
          <textarea id="endMessage" name="endMessage" rows="2" required></textarea>
        </div>
        <button class="btn btn-success" type="submit">Save Settings</button>
      </form>
      <div id="settingsStatus" style="margin-top:1rem;"></div>
    </div>
  </div>
</div>
</div>

<script>
// LiveChat API Configuration
const ACCESS_TOKEN = 'NzdiZGVmYjAtMWI2Mi00ZjllLTg1YWItYjczNzJjYTk1N2Y2OnVzLXNvdXRoMTpVLU1JbElnT0tiSEhuWldwN1E5YXFQaFR0VlU='

let currentTickets = [];
let selectedTicketId = null;
let chatHistory = new Map(); // Store chat history for each ticket
let chatDetails = new Map(); // Store chat details for each ticket

// Fetch promotions from backend and update UI with error handling
async function fetchPromotions(showLoading = true) {
    const promotionsList = document.getElementById('promotionsList');
    const loadingHtml = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
    
    if (showLoading) {
        promotionsList.innerHTML = loadingHtml;
    }
    
    try {
        // Use relative URL since we're serving from the same origin
        const response = await fetch('/api/promotions', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin' // Include cookies if any
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            window.promotions = data.promotions || [];
            updatePromotionsUI();
        } else {
            throw new Error(data.error || 'Failed to load promotions');
        }
    } catch (error) {
        console.error('Failed to fetch promotions:', error);
        promotionsList.innerHTML = '<div class="text-center py-4">Failed to load promotions.</div>';
    }
}

// Update all UI elements that show promotions
function updatePromotionsUI() {
    // Update bot response preview
    updateBotResponse();
    // Update promotions list
    const list = document.getElementById('promotionsList');
    if (!window.promotions || window.promotions.length === 0) {
        list.innerHTML = '<div style="padding:1rem">No promotions available.</div>';
        return;
    }
    list.innerHTML = window.promotions.map(p => `
        <div class="promotion-item"><div class="promotion-info">
        <h3>${p.title}</h3><p>${p.description}</p><p><strong>${p.discount}% off at xyz.com</strong></p><p>Code: <span class="promotion-code">${p.code || ''}</span></p>
        </div><div><button class="btn btn-danger" onclick="deletePromotion(${p.id})">Delete</button></div></div>
    `).join('');
}

// Add promotion via backend
async function addPromotion() {
    const t = document.getElementById('promoTitle').value.trim(),
          d = document.getElementById('promoDescription').value.trim(),
          disc = document.getElementById('promoDiscount').value,
          c = document.getElementById('promoCode').value.trim();
    if (!t || !d || !disc) {
        alert('Please fill in Title, Description, and Discount fields');
        return;
    }
    try {
        const res = await fetch('http://localhost:3001/promotions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title: t, description: d, discount: disc, code: c })
        });
        const data = await res.json();
        if (data.success) {
            document.getElementById('promoTitle').value = '';
            document.getElementById('promoDescription').value = '';
            document.getElementById('promoDiscount').value = '';
            document.getElementById('promoCode').value = '';
            await fetchPromotions();
            alert('Promotion added successfully!');
        } else {
            alert('Failed to add promotion: ' + (data.error || 'Unknown error'));
        }
    } catch (e) {
        alert('Failed to add promotion: ' + e.message);
    }
}

// Delete promotion via backend
async function deletePromotion(id) {
    if (!confirm('Delete this promotion?')) return;
    try {
        const res = await fetch(`http://localhost:3001/promotions/${id}`, { method: 'DELETE' });
        const data = await res.json();
        if (data.success) {
            await fetchPromotions();
            alert('Promotion deleted successfully!');
        } else {
            alert('Failed to delete: ' + (data.error || 'Unknown error'));
        }
    } catch (e) {
        alert('Failed to delete: ' + e.message);
    }
}

// Update bot response preview to use window.promotions
function updateBotResponse() {
    const r = document.getElementById('botResponse');
    if (!window.promotions || !window.promotions.length) {
        r.textContent = "No promotions available at the moment.";
        return;
    }
    let response = "🎁 Available Promotions:\n\n";
    window.promotions.forEach((p, i) => {
        response += `${i+1}. ${p.title}\n   ${p.description}\n   💰 ${p.discount}% off at xyz.com\n`;
        if (p.code) response += `   🎫 Code: ${p.code}\n`;
        response += '\n';
    });
    r.textContent = response;
}

// Helper function to escape HTML
function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .toString()
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

// Show notification to user
function showNotification(message, type = 'info') {
    // Remove any existing notifications
    const existing = document.querySelector('.notification-toast');
    if (existing) existing.remove();
    
    const toast = document.createElement('div');
    toast.className = `notification-toast alert alert-${type} alert-dismissible fade show`;
    toast.role = 'alert';
    toast.style.position = 'fixed';
    toast.style.top = '20px';
    toast.style.right = '20px';
    toast.style.zIndex = '1100';
    toast.style.minWidth = '300px';
    toast.style.maxWidth = '90%';
    toast.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    document.body.appendChild(toast);
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 150);
    }, 5000);
}

let templates={
    deposit:"Hi! I understand you're having trouble with your deposit. Let me check your account status. Please provide your user ID and the transaction reference number so I can assist you better.",
    password:"I'll help you reset your password. Please check your spam folder first, then I'll send you a new reset link to your registered email address.",
    promo:"I see you're having trouble with a promo code. Let me help you with that. Please make sure you're entering the code exactly as shown and that it hasn't expired."
};

// Initialize promotions on page load
document.addEventListener('DOMContentLoaded', function() {
    fetchPromotions();
});

// Tab switching
function switchTab(t){
    document.querySelectorAll('.nav-tab').forEach(tab=>tab.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content=>content.classList.remove('active'));
    document.querySelector(`[data-tab="${t}"]`).classList.add('active');
    document.getElementById(t).classList.add('active');
    
    // Auto-refresh tickets when switching to livechat tab
    if (t === 'livechat') {
        refreshTickets();
    }
}

// LiveChat API Functions
// Enhanced getActiveChats with better error handling and debugging
async function getActiveChats() {
    try {
        console.log('🔄 Fetching active chats...');
        const response = await fetch('https://api.livechatinc.com/v3.5/agent/action/list_chats', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                filters: {
                    status: ['active', 'queued', 'pending']
                },
                limit: 20
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('❌ API Error Response:', errorText);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('📋 Full API Response:', JSON.stringify(data, null, 2));

        // Handle different possible response structures
        let chats = data?.chats || data?.data?.chats || data?.chats_summary || data;

        // If chats is an object, convert to array
        if (chats && !Array.isArray(chats)) {
            chats = Object.values(chats);
        }

        if (!Array.isArray(chats)) {
            console.log('⚠️ No valid chats array found in response');
            return [];
        }

        // Filter out archived chats
        const activeChats = chats.filter(chat => {
            const status = chat.status || chat.chat?.status;
            return status !== 'archived' && status !== 'closed';
        });

        console.log(`✅ Found ${activeChats.length} active chats (filtered from ${chats.length} total)`);
        return activeChats;
    } catch (error) {
        console.error('❌ Failed to get chats:', error);
        return [];
    }
}

async function getLatestCustomerMessage(chatId) {
    try {
        console.log(`🔄 Fetching messages for chat ${chatId}...`);
        const response = await fetch('https://api.livechatinc.com/v3.5/agent/action/list_threads', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ chat_id: chatId })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`❌ Error response for chat ${chatId}:`, errorText);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log(`📋 Threads response for chat ${chatId}:`, JSON.stringify(data, null, 2));

        const allEvents = (data.threads || []).flatMap(thread => thread.events || []);
        console.log(`📝 Found ${allEvents.length} total events for chat ${chatId}`);
        
        const customerMessages = allEvents
            .filter(event => event.type === 'message' && event.text && event.author_id && 
                           !event.author_id.includes('agent') && !event.author_id.includes('bot'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        console.log(`👤 Found ${customerMessages.length} customer messages for chat ${chatId}`);
        
        if (customerMessages.length > 0) {
            console.log(`📨 Latest message: "${customerMessages[0].text.substring(0, 50)}..."`);
        }

        return customerMessages.length > 0 ? customerMessages[0] : null;
        
    } catch (error) {
        console.error(`❌ Error getting messages for ${chatId}:`, error);
        return null;
    }
}

// Get detailed information about a chat
async function getChatDetails(chatId) {
    try {
        console.log(`🔄 Fetching chat details for ${chatId}...`);
        const response = await fetch('https://api.livechatinc.com/v3.5/agent/action/get_chat', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ chat_id: chatId })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`❌ Error response for chat details ${chatId}:`, errorText);
            return null;
        }

        const data = await response.json();
        console.log(`📋 Chat details for ${chatId}:`, JSON.stringify(data, null, 2));
        
        // Check if chat is archived
        const status = data?.chat?.status || data?.status;
        if (status === 'archived' || status === 'closed') {
            console.log(`📁 Chat ${chatId} is archived/closed, skipping...`);
            return null;
        }
        
        // Store chat details
        chatDetails.set(chatId, data);
        return data;
        
    } catch (error) {
        console.error(`❌ Error getting chat details for ${chatId}:`, error);
        return null;
    }
}

// Enhanced sendMessage with fallback logic and auto-resume
async function sendMessage(chatId, message) {
    // Try Basic first
    let response, error;
    try {
        response = await fetch('https://api.livechatinc.com/v3.5/agent/action/send_event', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                chat_id: chatId,
                event: {
                    type: 'message',
                    text: message,
                    recipients: 'all'
                }
            })
        });
        if (response.ok) return true;
        error = await response.json();
        // If requester is not user of the chat, try to resume the chat
        if (error.error && error.error.message && error.error.message.includes('Requester is not user of the chat')) {
            const resumed = await tryResumeChat(chatId);
            if (resumed) {
                // Try sending again after resume
                response = await fetch('https://api.livechatinc.com/v3.5/agent/action/send_event', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Basic ${ACCESS_TOKEN}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        event: {
                            type: 'message',
                            text: message,
                            recipients: 'all'
                        }
                    })
                });
                if (response.ok) return true;
                error = await response.json();
            }
        }
        if (response.status === 401) throw new Error('basic_auth_failed');
        throw new Error(error.error?.message || 'Failed to send message');
    } catch (err) {
        // Try Bearer if Basic fails
        if (err.message === 'basic_auth_failed') {
            try {
                response = await fetch('https://api.livechatinc.com/v3.5/agent/action/send_event', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${ACCESS_TOKEN}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        event: {
                            type: 'message',
                            text: message,
                            recipients: 'all'
                        }
                    })
                });
                if (response.ok) return true;
                error = await response.json();
                throw new Error(error.error?.message || 'Failed to send message with Bearer');
            } catch (bearerErr) {
                // Try v3.4 as last resort
                try {
                    response = await fetch('https://api.livechatinc.com/v3.4/agent/action/send_event', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Basic ${ACCESS_TOKEN}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            chat_id: chatId,
                            event: {
                                type: 'message',
                                text: message
                            }
                        })
                    });
                    if (response.ok) return true;
                    error = await response.json();
                    throw new Error(error.error?.message || 'Failed to send message with v3.4');
                } catch (v34Err) {
                    showStatusMessage('❌ All attempts to send message failed: ' + (v34Err.message || 'Unknown error'), 'error');
                    return false;
                }
            }
        } else {
            // User-friendly error for requester not user
            if (err.message && err.message.includes('Requester is not user of the chat')) {
                showStatusMessage('❌ You must join or be assigned to this chat before sending a message. Please assign yourself or ask an admin.', 'error');
            } else {
                showStatusMessage('❌ Failed to send message: ' + (err.message || 'Unknown error'), 'error');
            }
            return false;
        }
    }
    return false;
}

// Try to resume/join the chat
async function tryResumeChat(chatId) {
    try {
        const response = await fetch('https://api.livechatinc.com/v3.5/agent/action/resume_chat', {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${ACCESS_TOKEN}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                chat: { id: chatId },
                active: true
            })
        });
        return response.ok;
    } catch (e) {
        return false;
    }
}

// Show status message in chat
function showStatusMessage(msg, type) {
    const chatMessages = document.getElementById('chatMessages');
    const div = document.createElement('div');
    div.className = 'chat-message ' + (type === 'error' ? 'support' : 'user');
    div.style.background = type === 'error' ? '#fee2e2' : '#d1fae5';
    div.style.color = type === 'error' ? '#dc2626' : '#065f46';
    div.innerHTML = `<div>${msg}</div>`;
    chatMessages.appendChild(div);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Ticket Management
async function refreshTickets() {
    const ticketsList = document.getElementById('ticketsList');
    ticketsList.innerHTML = '<div style="padding:2rem;text-align:center;color:#64748b"><div>🔄 Loading tickets...</div></div>';
    
    try {
        console.log('🔄 Starting ticket refresh...');
        const chats = await getActiveChats();
        console.log(`📋 Retrieved ${chats.length} total chats`);
        
        // Only show chats with an active thread
        const allChats = Array.isArray(chats) ? chats : [];
        const activeChats = allChats.filter(chat => 
            chat.last_thread_summary && chat.last_thread_summary.active
        );
        console.log(`📋 Using ${activeChats.length} active chats for ticket list`);
        
        currentTickets = [];
        
        if (activeChats.length === 0) {
            ticketsList.innerHTML = '<div style="padding:2rem;text-align:center;color:#64748b"><div>✅ No active chats found</div></div>';
            updateDashboardStats(0);
            return;
        }

        // Get latest message and details for each chat
        console.log('🔄 Fetching messages and details for each chat...');
        const ticketsWithMessages = await Promise.all(
            activeChats.map(async (chat) => {
                const latestMessage = await getLatestCustomerMessage(chat.id);
                const chatDetail = await getChatDetails(chat.id);
                return {
                    chat: chat,
                    latestMessage: latestMessage,
                    chatDetail: chatDetail
                };
            })
        );

        // Include all chats, even those without customer messages
        const validTickets = ticketsWithMessages.filter(ticket => ticket.chat);
        currentTickets = validTickets;

        console.log(`✅ Processing ${validTickets.length} tickets`);

        // Update tickets list
        if (validTickets.length === 0) {
            ticketsList.innerHTML = '<div style="padding:2rem;text-align:center;color:#64748b"><div>✅ No active chats found</div></div>';
        } else {
            ticketsList.innerHTML = validTickets.map((ticket, index) => {
                const chat = ticket.chat;
                const message = ticket.latestMessage;
                const chatDetail = ticket.chatDetail;
                const timeAgo = message ? getTimeAgo(new Date(message.created_at)) : 'No messages';
                const selected = (selectedTicketId === chat.id) ? 'selected' : '';
                const messageText = message ? message.text : 'No messages yet';
                
                // Get user information from chat details or message
                let userName = 'Unknown User';
                if (chatDetail && chatDetail.users && chatDetail.users.length > 0) {
                    const customer = chatDetail.users.find(user => !user.type || user.type === 'customer');
                    if (customer) {
                        userName = customer.name || customer.email || customer.id || 'Customer';
                    }
                } else if (message && message.author_id) {
                    userName = message.author_id;
                }
                
                // Show ticket code (chat ID) and user name
                return `
                <div class="ticket-item ${selected}" onclick="openChat('${chat.id}')" id="ticket-${chat.id}">
                    <div class="ticket-header">
                        <div>
                            <span class="ticket-id">Ticket: <b>${chat.id}</b></span>
                            <div class="ticket-user">@${userName} - ${timeAgo}</div>
                        </div>
                    </div>
                    <div class="ticket-message">${messageText}</div>
                </div>`;
            }).join('');
        }

        updateDashboardStats(validTickets.length);
        updateRecentActivity(validTickets);
        
    } catch (error) {
        console.error('❌ Error refreshing tickets:', error);
        ticketsList.innerHTML = '<div style="padding:2rem;text-align:center;color:#ef4444"><div>❌ Error loading tickets</div></div>';
    }
}

// Load full chat history for a ticket
async function loadChatHistory(chatId = selectedTicketId) {
    if (!chatId) return;
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '<div style="text-align:center;color:#64748b;padding:2rem">🔄 Loading chat history...</div>';
    try {
        console.log(`🔄 Loading chat history for ${chatId}...`);
        // Fetch chat details in parallel with threads
        const [threadsResponse, chatDetail] = await Promise.all([
            fetch('https://api.livechatinc.com/v3.5/agent/action/list_threads', {
                method: 'POST',
                headers: {
                    'Authorization': `Basic ${ACCESS_TOKEN}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ chat_id: chatId })
            }),
            getChatDetails(chatId)
        ]);
        if (!threadsResponse.ok) {
            const errorText = await threadsResponse.text();
            console.error(`❌ Error loading chat history for ${chatId}:`, errorText);
            throw new Error(`HTTP error! status: ${threadsResponse.status}`);
        }
        const data = await threadsResponse.json();
        console.log(`📋 Chat history response for ${chatId}:`, JSON.stringify(data, null, 2));
        const allEvents = (data.threads || []).flatMap(thread => thread.events || []);
        console.log(`📝 Found ${allEvents.length} events in chat history for ${chatId}`);
        // Store for later
        chatHistory.set(chatId, allEvents);
        // chatDetails is updated by getChatDetails
        renderChatMessages(allEvents);
    } catch (error) {
        console.error(`❌ Error loading chat history for ${chatId}:`, error);
        chatMessages.innerHTML = '<div style="text-align:center;color:#ef4444;padding:2rem">Error loading chat</div>';
    }
}

// Render all messages in chat
function renderChatMessages(events) {
    const chatMessages = document.getElementById('chatMessages');
    if (!events || events.length === 0) {
        chatMessages.innerHTML = '<div style="text-align:center;color:#64748b;padding:2rem">No messages found</div>';
        return;
    }
    // Get chat details for better user information
    const chatDetail = chatDetails.get(selectedTicketId);
    // Sort messages oldest to newest
    const sortedEvents = events.filter(e => e.type === 'message' && e.text).sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
    chatMessages.innerHTML = sortedEvents.map(event => {
        // Robustly determine if this is a support/agent/bot message
        let isAgent = false;
        let author = event.author_id || 'user';
        if (!event.author_id) {
            isAgent = true; // If no author_id, treat as support
        } else if (event.author_id.toLowerCase().includes('agent') || event.author_id.toLowerCase().includes('bot')) {
            isAgent = true;
        } else if (chatDetail && chatDetail.users && chatDetail.users.length > 0) {
            // If author_id matches a known agent/support id, treat as support
            const agent = chatDetail.users.find(user => user.type === 'agent' || user.type === 'bot');
            if (agent && agent.id === event.author_id) isAgent = true;
        }
        if (!isAgent && chatDetail && chatDetail.users && chatDetail.users.length > 0) {
            const customer = chatDetail.users.find(user => !user.type || user.type === 'customer');
            if (customer) {
                author = customer.name || customer.email || customer.id || 'Customer';
            }
        } else if (isAgent) {
            author = 'Support';
        }
        const time = event.created_at ? getTimeAgo(new Date(event.created_at)) : '';
        return `<div class="chat-message ${isAgent ? 'support' : 'user'}">
            <div class="message-author">${isAgent ? 'Support' : '@'+author}</div>
            <div>${event.text}</div>
            <div class="message-time">${time}</div>
        </div>`;
    }).join('');
    setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 0);
}

function getTicketStatus(status) {
    switch (status) {
        case 'active': return { text: 'Active', class: 'urgent' };
        case 'queued': return { text: 'Queued', class: 'open' };
        case 'pending': return { text: 'Pending', class: 'assigned' };
        default: return { text: 'Open', class: 'open' };
    }
}

function getTimeAgo(date) {
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins} minutes ago`;
    if (diffHours < 24) return `${diffHours} hours ago`;
    return `${diffDays} days ago`;
}

function updateDashboardStats(ticketCount) {
    document.getElementById('openTickets').textContent = ticketCount;
    // Always show 61 active users unless you want to simulate
    document.getElementById('activeUsers').textContent = 61;
    // Promotions count from backend
    document.getElementById('promotionsCount').textContent = (window.promotions && window.promotions.length) ? window.promotions.length : 3;
}

function updateRecentActivity(tickets) {
    const recentActivity = document.getElementById('recentActivity');
    const activities = tickets.slice(0, 4).map(ticket => {
        if (ticket.latestMessage) {
            const message = ticket.latestMessage.text.substring(0, 50) + (ticket.latestMessage.text.length > 50 ? '...' : '');
            
            // Get user information from chat details or message
            let userName = 'Unknown User';
            if (ticket.chatDetail && ticket.chatDetail.users && ticket.chatDetail.users.length > 0) {
                const customer = ticket.chatDetail.users.find(user => !user.type || user.type === 'customer');
                if (customer) {
                    userName = customer.name || customer.email || customer.id || 'Customer';
                }
            } else if (ticket.latestMessage && ticket.latestMessage.author_id) {
                userName = ticket.latestMessage.author_id;
            }
            
            return `• User @${userName} - ${message}`;
        } else {
            return `• Chat #${ticket.chat.id} - No messages yet`;
        }
    });
    
    if (activities.length === 0) {
        activities.push('• No recent activity');
    }
    
    recentActivity.innerHTML = activities.map(activity => 
        `<div style="margin-bottom:0.5rem">${activity}</div>`
    ).join('');
}

// Chat Functions
// Open a chat and load its history
async function openChat(chatId) {
    console.log(`🔄 Opening chat ${chatId}...`);
    selectedTicketId = chatId;
    document.getElementById('currentTicketId').textContent = chatId;
    
    // Highlight selected ticket
    document.querySelectorAll('.ticket-item').forEach(el => el.classList.remove('selected'));
    const selectedEl = document.getElementById('ticket-' + chatId);
    if (selectedEl) selectedEl.classList.add('selected');
    
    // Find chat status and user info
    const ticket = currentTickets.find(t => t.chat.id === chatId);
    const chatStatus = ticket ? ticket.chat.status : 'unknown';
    const statusObj = getTicketStatus(chatStatus);
    
    // Get user information for chat header
    let userName = 'Unknown User';
    if (ticket && ticket.chatDetail && ticket.chatDetail.users && ticket.chatDetail.users.length > 0) {
        const customer = ticket.chatDetail.users.find(user => !user.type || user.type === 'customer');
        if (customer) {
            userName = customer.name || customer.email || customer.id || 'Customer';
        }
    }
    
    document.getElementById('chatStatus').textContent = `(${statusObj.text}) - @${userName}`;
    document.getElementById('chatInputContainer').style.display = '';
    
    // Load chat history
    await loadChatHistory(chatId);
}

// Implement sendReply to simulate sending to test.js:
function playPing() {
    const audio = document.getElementById('pingSound');
    if (audio) {
        audio.currentTime = 0;
        audio.play();
    }
}

// Fast sendReply implementation for instant UI feedback
function sendReply() {
    const input = document.getElementById('replyMessage');
    const message = input.value.trim();
    if (!message || !selectedTicketId) return;
    // Optimistically add the message to the chat UI
    const chatMessages = document.getElementById('chatMessages');
    const now = new Date();
    const tempId = 'temp-' + now.getTime();
    const tempMsgHtml = `<div class=\"chat-message agent\" id=\"${tempId}\" style=\"opacity:0.6\">You: ${message} <span style='font-size:0.8em;color:#64748b'>(sending...)</span></div>`;
    chatMessages.innerHTML += tempMsgHtml;
    chatMessages.scrollTop = chatMessages.scrollHeight;
    input.value = '';
    input.focus();
    if (typeof playPing === 'function') playPing();
    // Send the message in the background
    sendMessage(selectedTicketId, message).then(success => {
        const tempMsg = document.getElementById(tempId);
        if (success) {
            if (tempMsg) tempMsg.outerHTML = `<div class='chat-message agent'>You: ${message}</div>`;
            // Optionally, reload chat history for accuracy
            // loadChatHistory(selectedTicketId);
        } else {
            if (tempMsg) tempMsg.outerHTML = `<div class='chat-message agent' style='color:#ef4444'>You: ${message} <span style='font-size:0.8em'>(failed)</span></div>`;
        }
    });
}

// Remove or disable sendMessage function
// Remove or disable sendReply function
// Remove or disable chat input UI

// Template Functions
function useTemplate(t) {
    document.getElementById('replyMessage').value = templates[t];
}

function handleKeyPress(e) {
    if (e.key === 'Enter') sendReply();
}

function assignTicket(id) {
    alert(`Ticket #${id} assigned to you!`);
}

function resolveTicket(id) {
    if (confirm(`Mark ticket #${id} as resolved?`)) {
        alert(`Ticket #${id} resolved successfully!`);
        refreshTickets(); // Refresh the list
    }
}

// Debug function to help troubleshoot API issues
function debugChat() {
    console.log('🐛 Debug Information:');
    console.log('Selected Ticket ID:', selectedTicketId);
    console.log('Current Tickets:', currentTickets);
    console.log('Chat History:', chatHistory);
    console.log('Chat Details:', chatDetails);
    
    if (selectedTicketId) {
        const ticket = currentTickets.find(t => t.chat.id === selectedTicketId);
        console.log('Selected Ticket:', ticket);
        
        if (ticket) {
            console.log('Chat Object:', ticket.chat);
            console.log('Latest Message:', ticket.latestMessage);
            console.log('Chat Detail:', ticket.chatDetail);
        }
    }
    
    alert('Debug information logged to console. Press F12 to view.');
}

// Promotion Functions
// Remove local promotions array
// let promotions = ...

// Fetch promotions from backend and update UI with error handling
async function fetchPromotions(showLoading = true) {
    const promotionsList = document.getElementById('promotionsList');
    const loadingHtml = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
    
    if (showLoading) {
        promotionsList.innerHTML = loadingHtml;
    }
    
    try {
        const response = await fetch('/api/promotions', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            window.promotions = data.promotions || [];
            updatePromotionsUI();
        } else {
            throw new Error(data.error || 'Failed to load promotions');
        }
    } catch (error) {
        console.error('Failed to fetch promotions:', error);
        window.promotions = [];
        updatePromotionsUI();
        
        if (showLoading) {
            promotionsList.innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Failed to load promotions. Please try again later.
                </div>
            `;
        }
    }
}

// Update all UI elements that show promotions
function updatePromotionsUI() {
    // Update bot response preview
    updateBotResponse();
    // Update promotions list
    const list = document.getElementById('promotionsList');
    if (!window.promotions || window.promotions.length === 0) {
        list.innerHTML = '<div style="padding:1rem">No promotions available.</div>';
        return;
    }
    list.innerHTML = window.promotions.map(p => `
        <div class="promotion-item"><div class="promotion-info">
        <h3>${p.title}</h3><p>${p.description}</p><p><strong>${p.discount}% off at xyz.com</strong></p><p>Code: <span class="promotion-code">${p.code || ''}</span></p>
        </div><div><button class="btn btn-danger" onclick="deletePromotion(${p.id})">Delete</button></div></div>
    `).join('');
}

// Add promotion via backend
async function addPromotion() {
    const t = document.getElementById('promoTitle').value.trim(),
          d = document.getElementById('promoDescription').value.trim(),
          disc = document.getElementById('promoDiscount').value,
          c = document.getElementById('promoCode').value.trim();
    if (!t || !d || !disc) {
        alert('Please fill in Title, Description, and Discount fields');
        return;
    }
    try {
        const res = await fetch('http://localhost:3001/promotions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title: t, description: d, discount: disc, code: c })
        });
        const data = await res.json();
        if (data.success) {
            document.getElementById('promoTitle').value = '';
            document.getElementById('promoDescription').value = '';
            document.getElementById('promoDiscount').value = '';
            document.getElementById('promoCode').value = '';
            await fetchPromotions();
            alert('Promotion added successfully!');
        } else {
            alert('Failed to add promotion: ' + (data.error || 'Unknown error'));
        }
    } catch (e) {
        alert('Failed to add promotion: ' + e.message);
    }
}

// Delete promotion via backend
async function deletePromotion(id) {
    if (!confirm('Delete this promotion?')) return;
    try {
        const res = await fetch(`http://localhost:3001/promotions/${id}`, { method: 'DELETE' });
        const data = await res.json();
        if (data.success) {
            await fetchPromotions();
            alert('Promotion deleted successfully!');
        } else {
            alert('Failed to delete: ' + (data.error || 'Unknown error'));
        }
    } catch (e) {
        alert('Failed to delete: ' + e.message);
    }
}

// Update bot response preview to use window.promotions
function updateBotResponse() {
    const r = document.getElementById('botResponse');
    if (!window.promotions || !window.promotions.length) {
        r.textContent = "No promotions available at the moment.";
        return;
    }
    let response = "🎁 Available Promotions:\n\n";
    window.promotions.forEach((p, i) => {
        response += `${i+1}. ${p.title}\n   ${p.description}\n   💰 ${p.discount}% off at xyz.com\n`;
        if (p.code) response += `   🎫 Code: ${p.code}\n`;
        response += '\n';
    });
    r.textContent = response;
}

function loadSettings() {
  fetch('http://localhost:3001/settings')
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        document.getElementById('brandName').value = data.settings.brandName || '';
        document.getElementById('welcomeMessage').value = data.settings.welcomeMessage || '';
        document.getElementById('waitMessage').value = data.settings.waitMessage || '';
        document.getElementById('endMessage').value = data.settings.endMessage || '';
      }
    });
}
function saveSettings(e) {
  e.preventDefault();
  const settings = {
    brandName: document.getElementById('brandName').value,
    welcomeMessage: document.getElementById('welcomeMessage').value,
    waitMessage: document.getElementById('waitMessage').value,
    endMessage: document.getElementById('endMessage').value
  };
  fetch('http://localhost:3001/settings', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(settings)
  })
    .then(res => res.json())
    .then(data => {
      const status = document.getElementById('settingsStatus');
      if (data.success) {
        status.textContent = 'Settings saved!';
        status.style.color = '#16a34a';
      } else {
        status.textContent = 'Failed to save settings.';
        status.style.color = '#dc2626';
      }
    });
}
document.querySelector('[data-tab="settings"]').addEventListener('click', () => {
  switchTab('settings');
  loadSettings();
});

// Initialize
document.querySelectorAll('.nav-tab').forEach(tab=>tab.addEventListener('click',()=>switchTab(tab.getAttribute('data-tab'))));
// On page load, fetch promotions
fetchPromotions();

// Auto-refresh tickets every 15 seconds (faster polling)
setInterval(() => {
    if (document.querySelector('[data-tab="livechat"]').classList.contains('active')) {
        refreshTickets();
    }
}, 15000);

// Auto-refresh chat history every 5 seconds for the open chat (faster polling)
setInterval(() => {
    if (
        document.querySelector('[data-tab="livechat"]').classList.contains('active') &&
        selectedTicketId
    ) {
        loadChatHistory(selectedTicketId);
    }
}, 5000);
</script>
</body>

</html>